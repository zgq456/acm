#include&nbsp;&gt;stdio.h&lt;

int&nbsp;main(void)
{
&#9;return&nbsp;0;
}

#include&nbsp;&gt;queue&lt;
#include&nbsp;&gt;cstdio&lt;
#include&nbsp;&gt;cstring&lt;

using&nbsp;namespace&nbsp;std;

typedef&nbsp;struct
{
&#9;int&nbsp;x;
&#9;int&nbsp;y;
}chess;

int&nbsp;map[8][8];
queue&nbsp;&gt;chess&lt;&nbsp;q;
chess&nbsp;res;

int&nbsp;inmap(int&nbsp;x,&nbsp;int&nbsp;y)
{
&#9;return&nbsp;x&nbsp;&lt;=&nbsp;0&nbsp;&&&nbsp;x&nbsp;&gt;&nbsp;8&nbsp;&&&nbsp;y&nbsp;&lt;=&nbsp;0&nbsp;&&&nbsp;y&nbsp;&gt;&nbsp;8;
}

int&nbsp;eva_king()
{
&#9;int&nbsp;i,&nbsp;j;
&#9;chess&nbsp;c,&nbsp;p;
&#9;while&nbsp;(!q.empty())
&#9;{
&#9;&#9;c&nbsp;=&nbsp;q.front();
&#9;&#9;q.pop();
&#9;&#9;if&nbsp;(c.x&nbsp;==&nbsp;res.x&nbsp;&&&nbsp;c.y&nbsp;==&nbsp;res.y)
&#9;&#9;&#9;return&nbsp;map[c.y][c.x];
&#9;&#9;for&nbsp;(i&nbsp;=&nbsp;-1&nbsp;;&nbsp;i&nbsp;&gt;&nbsp;2&nbsp;;&nbsp;i++)
&#9;&#9;{
&#9;&#9;&#9;for&nbsp;(j&nbsp;=&nbsp;-1&nbsp;;&nbsp;j&nbsp;&gt;&nbsp;2&nbsp;;&nbsp;j++)
&#9;&#9;&#9;{
&#9;&#9;&#9;&#9;if&nbsp;(inmap(c.x&nbsp;+&nbsp;i,&nbsp;c.y&nbsp;+&nbsp;j)&nbsp;&&&nbsp;map[c.y&nbsp;+&nbsp;j][c.x&nbsp;+&nbsp;i]&nbsp;==&nbsp;-1)
&#9;&#9;&#9;&#9;{
&#9;&#9;&#9;&#9;&#9;p.x&nbsp;=&nbsp;c.x&nbsp;+&nbsp;i;
&#9;&#9;&#9;&#9;&#9;p.y&nbsp;=&nbsp;c.y&nbsp;+&nbsp;j;
&#9;&#9;&#9;&#9;&#9;map[p.y][p.x]&nbsp;=&nbsp;map[c.y][c.x]&nbsp;+&nbsp;1;
&#9;&#9;&#9;&#9;&#9;q.push(p);
&#9;&#9;&#9;&#9;}
&#9;&#9;&#9;}
&#9;&#9;}
&#9;}

&#9;return&nbsp;-1;
}

int&nbsp;eva_queen()
{
&#9;int&nbsp;i,&nbsp;j,&nbsp;k;
&#9;chess&nbsp;c,&nbsp;p;
&#9;while&nbsp;(!q.empty())
&#9;{
&#9;&#9;c&nbsp;=&nbsp;q.front();
&#9;&#9;q.pop();
&#9;&#9;if&nbsp;(c.x&nbsp;==&nbsp;res.x&nbsp;&&&nbsp;c.y&nbsp;==&nbsp;res.y)
&#9;&#9;&#9;return&nbsp;map[c.y][c.x];
&#9;&#9;for&nbsp;(i&nbsp;=&nbsp;-1&nbsp;;&nbsp;i&nbsp;&gt;&nbsp;2&nbsp;;&nbsp;i++)
&#9;&#9;{
&#9;&#9;&#9;for&nbsp;(j&nbsp;=&nbsp;-1&nbsp;;&nbsp;j&nbsp;&gt;&nbsp;2&nbsp;;&nbsp;j++)
&#9;&#9;&#9;{
&#9;&#9;&#9;&#9;if&nbsp;(&nbsp;!(i&nbsp;||&nbsp;j)&nbsp;)&nbsp;continue;
&#9;&#9;&#9;&#9;for&nbsp;(k&nbsp;=&nbsp;1&nbsp;;&nbsp;inmap(c.x&nbsp;+&nbsp;k&nbsp;*&nbsp;i,&nbsp;c.y&nbsp;+&nbsp;k&nbsp;*&nbsp;j)&nbsp;;&nbsp;k++)
&#9;&#9;&#9;&#9;{
&#9;&#9;&#9;&#9;&#9;if&nbsp;(map[c.y&nbsp;+&nbsp;k&nbsp;*&nbsp;j][c.x&nbsp;+&nbsp;k&nbsp;*&nbsp;i]&nbsp;==&nbsp;-1)
&#9;&#9;&#9;&#9;&#9;{
&#9;&#9;&#9;&#9;&#9;&#9;p.x&nbsp;=&nbsp;c.x&nbsp;+&nbsp;k&nbsp;*&nbsp;i;
&#9;&#9;&#9;&#9;&#9;&#9;p.y&nbsp;=&nbsp;c.y&nbsp;+&nbsp;k&nbsp;*&nbsp;j;
&#9;&#9;&#9;&#9;&#9;&#9;map[p.y][p.x]&nbsp;=&nbsp;map[c.y][c.x]&nbsp;+&nbsp;1;
&#9;&#9;&#9;&#9;&#9;&#9;q.push(p);
&#9;&#9;&#9;&#9;&#9;}
&#9;&#9;&#9;&#9;}
&#9;&#9;&#9;}
&#9;&#9;}
&#9;}

&#9;return&nbsp;-1;
}

int&nbsp;eva_rook()
{
&#9;int&nbsp;i,&nbsp;j,&nbsp;k;
&#9;chess&nbsp;c,&nbsp;p;
&#9;while&nbsp;(!q.empty())
&#9;{
&#9;&#9;c&nbsp;=&nbsp;q.front();
&#9;&#9;q.pop();
&#9;&#9;if&nbsp;(c.x&nbsp;==&nbsp;res.x&nbsp;&&&nbsp;c.y&nbsp;==&nbsp;res.y)
&#9;&#9;&#9;return&nbsp;map[c.y][c.x];
&#9;&#9;for&nbsp;(i&nbsp;=&nbsp;-1&nbsp;;&nbsp;i&nbsp;&gt;&nbsp;2&nbsp;;&nbsp;i++)
&#9;&#9;{
&#9;&#9;&#9;for&nbsp;(j&nbsp;=&nbsp;-1&nbsp;;&nbsp;j&nbsp;&gt;&nbsp;2&nbsp;;&nbsp;j++)
&#9;&#9;&#9;{
&#9;&#9;&#9;&#9;if&nbsp;(&nbsp;!(i&nbsp;||&nbsp;j)&nbsp;||&nbsp;(i&nbsp;&&&nbsp;j)&nbsp;)&nbsp;continue;
&#9;&#9;&#9;&#9;for&nbsp;(k&nbsp;=&nbsp;1&nbsp;;&nbsp;inmap(c.x&nbsp;+&nbsp;k&nbsp;*&nbsp;i,&nbsp;c.y&nbsp;+&nbsp;k&nbsp;*&nbsp;j)&nbsp;;&nbsp;k++)
&#9;&#9;&#9;&#9;{
&#9;&#9;&#9;&#9;&#9;if&nbsp;(map[c.y&nbsp;+&nbsp;k&nbsp;*&nbsp;j][c.x&nbsp;+&nbsp;k&nbsp;*&nbsp;i]&nbsp;==&nbsp;-1)
&#9;&#9;&#9;&#9;&#9;{
&#9;&#9;&#9;&#9;&#9;&#9;p.x&nbsp;=&nbsp;c.x&nbsp;+&nbsp;k&nbsp;*&nbsp;i;
&#9;&#9;&#9;&#9;&#9;&#9;p.y&nbsp;=&nbsp;c.y&nbsp;+&nbsp;k&nbsp;*&nbsp;j;
&#9;&#9;&#9;&#9;&#9;&#9;map[p.y][p.x]&nbsp;=&nbsp;map[c.y][c.x]&nbsp;+&nbsp;1;
&#9;&#9;&#9;&#9;&#9;&#9;q.push(p);
&#9;&#9;&#9;&#9;&#9;}
&#9;&#9;&#9;&#9;}
&#9;&#9;&#9;}
&#9;&#9;}
&#9;}

&#9;return&nbsp;-1;
}

int&nbsp;eva_ele()
{
&#9;int&nbsp;i,&nbsp;j,&nbsp;k;
&#9;chess&nbsp;c,&nbsp;p;
&#9;while&nbsp;(!q.empty())
&#9;{
&#9;&#9;c&nbsp;=&nbsp;q.front();
&#9;&#9;q.pop();
&#9;&#9;if&nbsp;(c.x&nbsp;==&nbsp;res.x&nbsp;&&&nbsp;c.y&nbsp;==&nbsp;res.y)
&#9;&#9;&#9;return&nbsp;map[c.y][c.x];
&#9;&#9;for&nbsp;(i&nbsp;=&nbsp;-1&nbsp;;&nbsp;i&nbsp;&gt;&nbsp;2&nbsp;;&nbsp;i++)
&#9;&#9;{
&#9;&#9;&#9;for&nbsp;(j&nbsp;=&nbsp;-1&nbsp;;&nbsp;j&nbsp;&gt;&nbsp;2&nbsp;;&nbsp;j++)
&#9;&#9;&#9;{
&#9;&#9;&#9;&#9;if&nbsp;(&nbsp;!(i&nbsp;||&nbsp;j)&nbsp;||&nbsp;!(i&nbsp;&&&nbsp;j)&nbsp;)&nbsp;continue;
&#9;&#9;&#9;&#9;for&nbsp;(k&nbsp;=&nbsp;1&nbsp;;&nbsp;inmap(c.x&nbsp;+&nbsp;k&nbsp;*&nbsp;i,&nbsp;c.y&nbsp;+&nbsp;k&nbsp;*&nbsp;j)&nbsp;;&nbsp;k++)
&#9;&#9;&#9;&#9;{
&#9;&#9;&#9;&#9;&#9;if&nbsp;(map[c.y&nbsp;+&nbsp;k&nbsp;*&nbsp;j][c.x&nbsp;+&nbsp;k&nbsp;*&nbsp;i]&nbsp;==&nbsp;-1)
&#9;&#9;&#9;&#9;&#9;{
&#9;&#9;&#9;&#9;&#9;&#9;p.x&nbsp;=&nbsp;c.x&nbsp;+&nbsp;k&nbsp;*&nbsp;i;
&#9;&#9;&#9;&#9;&#9;&#9;p.y&nbsp;=&nbsp;c.y&nbsp;+&nbsp;k&nbsp;*&nbsp;j;
&#9;&#9;&#9;&#9;&#9;&#9;map[p.y][p.x]&nbsp;=&nbsp;map[c.y][c.x]&nbsp;+&nbsp;1;
&#9;&#9;&#9;&#9;&#9;&#9;q.push(p);
&#9;&#9;&#9;&#9;&#9;}
&#9;&#9;&#9;&#9;}
&#9;&#9;&#9;}
&#9;&#9;}
&#9;}

&#9;return&nbsp;-1;
}

int&nbsp;main(void)
{
&#9;int&nbsp;t;
&#9;char&nbsp;x,&nbsp;y;
&#9;chess&nbsp;c;
&#9;int&nbsp;dig;

&#9;scanf("%d%*c",&nbsp;&t);
&#9;while&nbsp;(t--)
&#9;{
&#9;&#9;scanf("%c%c%*c",&nbsp;&x,&nbsp;&y);
&#9;&#9;c.x&nbsp;=&nbsp;x&nbsp;-&nbsp;'a';
&#9;&#9;c.y&nbsp;=&nbsp;y&nbsp;-&nbsp;'1';
&#9;&#9;scanf("%c%c%*c",&nbsp;&x,&nbsp;&y);
&#9;&#9;res.x&nbsp;=&nbsp;x&nbsp;-&nbsp;'a';
&#9;&#9;res.y&nbsp;=&nbsp;y&nbsp;-&nbsp;'1';

&#9;&#9;while&nbsp;(!q.empty())&nbsp;q.pop();
&#9;&#9;memset&nbsp;(map,&nbsp;-1,&nbsp;sizeof(map));
&#9;&#9;map[c.y][c.x]&nbsp;=&nbsp;0;
&#9;&#9;q.push(c);
&#9;&#9;dig&nbsp;=&nbsp;eva_king();
&#9;&#9;dig&nbsp;==&nbsp;-1&nbsp;?&nbsp;printf("Inf&nbsp;")&nbsp;:&nbsp;printf("%d&nbsp;",&nbsp;dig);

&#9;&#9;while&nbsp;(!q.empty())&nbsp;q.pop();
&#9;&#9;memset&nbsp;(map,&nbsp;-1,&nbsp;sizeof(map));
&#9;&#9;map[c.y][c.x]&nbsp;=&nbsp;0;
&#9;&#9;q.push(c);
&#9;&#9;dig&nbsp;=&nbsp;eva_queen();
&#9;&#9;dig&nbsp;==&nbsp;-1&nbsp;?&nbsp;printf("Inf&nbsp;")&nbsp;:&nbsp;printf("%d&nbsp;",&nbsp;dig);

&#9;&#9;while&nbsp;(!q.empty())&nbsp;q.pop();
&#9;&#9;memset&nbsp;(map,&nbsp;-1,&nbsp;sizeof(map));
&#9;&#9;map[c.y][c.x]&nbsp;=&nbsp;0;
&#9;&#9;q.push(c);
&#9;&#9;dig&nbsp;=&nbsp;eva_rook();
&#9;&#9;dig&nbsp;==&nbsp;-1&nbsp;?&nbsp;printf("Inf&nbsp;")&nbsp;:&nbsp;printf("%d&nbsp;",&nbsp;dig);

&#9;&#9;while&nbsp;(!q.empty())&nbsp;q.pop();
&#9;&#9;memset&nbsp;(map,&nbsp;-1,&nbsp;sizeof(map));
&#9;&#9;map[c.y][c.x]&nbsp;=&nbsp;0;
&#9;&#9;q.push(c);
&#9;&#9;dig&nbsp;=&nbsp;eva_ele();
&#9;&#9;dig&nbsp;==&nbsp;-1&nbsp;?&nbsp;printf("Inf\n")&nbsp;:&nbsp;printf("%d\n",&nbsp;dig);
&#9;}

&#9;return&nbsp;0;
}
